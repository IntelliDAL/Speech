# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/101_models.ResNet.ipynb (unless otherwise specified).

__all__ = ['ResBlock', 'ResNet', 'CnnBlock']

# Cell
from ..imports import *
from .layers import *
from .utils import *


# Cell
class ResBlock(Module):
    def __init__(self, ni, nf, kss=[3]):
        self.convblock1 = ConvBlock(ni, nf, kss[0], stride=3, act=None)

        for m in self.modules():
            if isinstance(m, nn.Conv1d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
            elif isinstance(m, (nn.BatchNorm1d, nn.GroupNorm)):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)

    def forward(self, x):
        x = self.convblock1(x)
        return x


class CnnBlock(Module):
    def __init__(self, c_in, c_out):
        self.resblock = ResBlock(c_in, c_out)

    def forward(self, x):
        x = self.resblock(x)
        return x
